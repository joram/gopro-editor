/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface InterestLevel
 */
export interface InterestLevel {
    /**
     * 
     * @type {number}
     * @memberof InterestLevel
     */
    'timestamp': number;
    /**
     * 
     * @type {number}
     * @memberof InterestLevel
     */
    'interest_level': number;
}
/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'slug': string;
    /**
     * 
     * @type {Array<Video>}
     * @memberof Project
     */
    'videos': Array<Video>;
}
/**
 * 
 * @export
 * @interface Segment
 */
export interface Segment {
    /**
     * 
     * @type {number}
     * @memberof Segment
     */
    'start_time': number;
    /**
     * 
     * @type {number}
     * @memberof Segment
     */
    'end_time': number;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}
/**
 * 
 * @export
 * @interface Video
 */
export interface Video {
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'project_dir_name': string;
    /**
     * 
     * @type {number}
     * @memberof Video
     */
    'length': number;
    /**
     * 
     * @type {number}
     * @memberof Video
     */
    'size_bytes': number;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'mp4_filename': string;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'lrv_filename': string | null;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'thumbnail_filename': string | null;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'accel_filename': string | null;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'gyro_filename': string | null;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'segments_filename': string | null;
    /**
     * 
     * @type {Array<Segment>}
     * @memberof Video
     */
    'suggested_segments'?: Array<Segment> | null;
    /**
     * 
     * @type {Array<InterestLevel>}
     * @memberof Video
     */
    'interest_levels'?: Array<InterestLevel> | null;
    /**
     * 
     * @type {Array<{ [key: string]: any; }>}
     * @memberof Video
     */
    'accel'?: Array<{ [key: string]: any; }>;
    /**
     * 
     * @type {Array<{ [key: string]: any; }>}
     * @memberof Video
     */
    'gyro'?: Array<{ [key: string]: any; }>;
    /**
     * 
     * @type {Array<Segment>}
     * @memberof Video
     */
    'segments'?: Array<Segment>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Build Final Cut
         * @param {string} projectSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildFinalCutApiProjectProjectSlugFinalGet: async (projectSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('buildFinalCutApiProjectProjectSlugFinalGet', 'projectSlug', projectSlug)
            const localVarPath = `/api/project/{project_slug}/final`
                .replace(`{${"project_slug"}}`, encodeURIComponent(String(projectSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Project
         * @param {string} projectSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectApiProjectProjectSlugCalculateGet: async (projectSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getProjectApiProjectProjectSlugCalculateGet', 'projectSlug', projectSlug)
            const localVarPath = `/api/project/{project_slug}/calculate`
                .replace(`{${"project_slug"}}`, encodeURIComponent(String(projectSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Project
         * @param {string} projectSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectApiProjectProjectSlugGet: async (projectSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getProjectApiProjectProjectSlugGet', 'projectSlug', projectSlug)
            const localVarPath = `/api/project/{project_slug}`
                .replace(`{${"project_slug"}}`, encodeURIComponent(String(projectSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsApiProjectsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Video
         * @param {string} projectSlug 
         * @param {string} videoSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoApiProjectProjectSlugVideoVideoSlugGet: async (projectSlug: string, videoSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getVideoApiProjectProjectSlugVideoVideoSlugGet', 'projectSlug', projectSlug)
            // verify required parameter 'videoSlug' is not null or undefined
            assertParamExists('getVideoApiProjectProjectSlugVideoVideoSlugGet', 'videoSlug', videoSlug)
            const localVarPath = `/api/project/{project_slug}/video/{video_slug}`
                .replace(`{${"project_slug"}}`, encodeURIComponent(String(projectSlug)))
                .replace(`{${"video_slug"}}`, encodeURIComponent(String(videoSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Video Preview
         * @param {string} projectSlug 
         * @param {string} videoSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoPreviewApiProjectProjectSlugVideoVideoSlugPreviewGet: async (projectSlug: string, videoSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getVideoPreviewApiProjectProjectSlugVideoVideoSlugPreviewGet', 'projectSlug', projectSlug)
            // verify required parameter 'videoSlug' is not null or undefined
            assertParamExists('getVideoPreviewApiProjectProjectSlugVideoVideoSlugPreviewGet', 'videoSlug', videoSlug)
            const localVarPath = `/api/project/{project_slug}/video/{video_slug}/preview`
                .replace(`{${"project_slug"}}`, encodeURIComponent(String(projectSlug)))
                .replace(`{${"video_slug"}}`, encodeURIComponent(String(videoSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Video Segments
         * @param {string} projectSlug 
         * @param {string} videoSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoSegmentsApiProjectProjectSlugVideoVideoSlugThumbnailGet: async (projectSlug: string, videoSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getVideoSegmentsApiProjectProjectSlugVideoVideoSlugThumbnailGet', 'projectSlug', projectSlug)
            // verify required parameter 'videoSlug' is not null or undefined
            assertParamExists('getVideoSegmentsApiProjectProjectSlugVideoVideoSlugThumbnailGet', 'videoSlug', videoSlug)
            const localVarPath = `/api/project/{project_slug}/video/{video_slug}/thumbnail`
                .replace(`{${"project_slug"}}`, encodeURIComponent(String(projectSlug)))
                .replace(`{${"video_slug"}}`, encodeURIComponent(String(videoSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Videos
         * @param {string} projectSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideosApiProjectProjectSlugVideosGet: async (projectSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getVideosApiProjectProjectSlugVideosGet', 'projectSlug', projectSlug)
            const localVarPath = `/api/project/{project_slug}/videos`
                .replace(`{${"project_slug"}}`, encodeURIComponent(String(projectSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Serve React App
         * @param {string} filepath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serveReactAppFilepathGet: async (filepath: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filepath' is not null or undefined
            assertParamExists('serveReactAppFilepathGet', 'filepath', filepath)
            const localVarPath = `/{filepath}`
                .replace(`{${"filepath"}}`, encodeURIComponent(String(filepath)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set Video Segments
         * @param {string} projectSlug 
         * @param {string} videoSlug 
         * @param {Array<Segment>} segment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVideoSegmentsApiProjectProjectSlugVideoVideoSlugSegmentsPost: async (projectSlug: string, videoSlug: string, segment: Array<Segment>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('setVideoSegmentsApiProjectProjectSlugVideoVideoSlugSegmentsPost', 'projectSlug', projectSlug)
            // verify required parameter 'videoSlug' is not null or undefined
            assertParamExists('setVideoSegmentsApiProjectProjectSlugVideoVideoSlugSegmentsPost', 'videoSlug', videoSlug)
            // verify required parameter 'segment' is not null or undefined
            assertParamExists('setVideoSegmentsApiProjectProjectSlugVideoVideoSlugSegmentsPost', 'segment', segment)
            const localVarPath = `/api/project/{project_slug}/video/{video_slug}/segments`
                .replace(`{${"project_slug"}}`, encodeURIComponent(String(projectSlug)))
                .replace(`{${"video_slug"}}`, encodeURIComponent(String(videoSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(segment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Build Final Cut
         * @param {string} projectSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buildFinalCutApiProjectProjectSlugFinalGet(projectSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buildFinalCutApiProjectProjectSlugFinalGet(projectSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.buildFinalCutApiProjectProjectSlugFinalGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Project
         * @param {string} projectSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectApiProjectProjectSlugCalculateGet(projectSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectApiProjectProjectSlugCalculateGet(projectSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getProjectApiProjectProjectSlugCalculateGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Project
         * @param {string} projectSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectApiProjectProjectSlugGet(projectSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectApiProjectProjectSlugGet(projectSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getProjectApiProjectProjectSlugGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectsApiProjectsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Project>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectsApiProjectsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getProjectsApiProjectsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Video
         * @param {string} projectSlug 
         * @param {string} videoSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideoApiProjectProjectSlugVideoVideoSlugGet(projectSlug: string, videoSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVideoApiProjectProjectSlugVideoVideoSlugGet(projectSlug, videoSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getVideoApiProjectProjectSlugVideoVideoSlugGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Video Preview
         * @param {string} projectSlug 
         * @param {string} videoSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideoPreviewApiProjectProjectSlugVideoVideoSlugPreviewGet(projectSlug: string, videoSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVideoPreviewApiProjectProjectSlugVideoVideoSlugPreviewGet(projectSlug, videoSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getVideoPreviewApiProjectProjectSlugVideoVideoSlugPreviewGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Video Segments
         * @param {string} projectSlug 
         * @param {string} videoSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideoSegmentsApiProjectProjectSlugVideoVideoSlugThumbnailGet(projectSlug: string, videoSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVideoSegmentsApiProjectProjectSlugVideoVideoSlugThumbnailGet(projectSlug, videoSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getVideoSegmentsApiProjectProjectSlugVideoVideoSlugThumbnailGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Videos
         * @param {string} projectSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideosApiProjectProjectSlugVideosGet(projectSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVideosApiProjectProjectSlugVideosGet(projectSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getVideosApiProjectProjectSlugVideosGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rootGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Serve React App
         * @param {string} filepath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async serveReactAppFilepathGet(filepath: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.serveReactAppFilepathGet(filepath, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.serveReactAppFilepathGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set Video Segments
         * @param {string} projectSlug 
         * @param {string} videoSlug 
         * @param {Array<Segment>} segment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setVideoSegmentsApiProjectProjectSlugVideoVideoSlugSegmentsPost(projectSlug: string, videoSlug: string, segment: Array<Segment>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setVideoSegmentsApiProjectProjectSlugVideoVideoSlugSegmentsPost(projectSlug, videoSlug, segment, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setVideoSegmentsApiProjectProjectSlugVideoVideoSlugSegmentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Build Final Cut
         * @param {string} projectSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildFinalCutApiProjectProjectSlugFinalGet(projectSlug: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.buildFinalCutApiProjectProjectSlugFinalGet(projectSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Project
         * @param {string} projectSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectApiProjectProjectSlugCalculateGet(projectSlug: string, options?: RawAxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.getProjectApiProjectProjectSlugCalculateGet(projectSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Project
         * @param {string} projectSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectApiProjectProjectSlugGet(projectSlug: string, options?: RawAxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.getProjectApiProjectProjectSlugGet(projectSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsApiProjectsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Project>> {
            return localVarFp.getProjectsApiProjectsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Video
         * @param {string} projectSlug 
         * @param {string} videoSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoApiProjectProjectSlugVideoVideoSlugGet(projectSlug: string, videoSlug: string, options?: RawAxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.getVideoApiProjectProjectSlugVideoVideoSlugGet(projectSlug, videoSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Video Preview
         * @param {string} projectSlug 
         * @param {string} videoSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoPreviewApiProjectProjectSlugVideoVideoSlugPreviewGet(projectSlug: string, videoSlug: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getVideoPreviewApiProjectProjectSlugVideoVideoSlugPreviewGet(projectSlug, videoSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Video Segments
         * @param {string} projectSlug 
         * @param {string} videoSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoSegmentsApiProjectProjectSlugVideoVideoSlugThumbnailGet(projectSlug: string, videoSlug: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getVideoSegmentsApiProjectProjectSlugVideoVideoSlugThumbnailGet(projectSlug, videoSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Videos
         * @param {string} projectSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideosApiProjectProjectSlugVideosGet(projectSlug: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.getVideosApiProjectProjectSlugVideosGet(projectSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Serve React App
         * @param {string} filepath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serveReactAppFilepathGet(filepath: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.serveReactAppFilepathGet(filepath, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set Video Segments
         * @param {string} projectSlug 
         * @param {string} videoSlug 
         * @param {Array<Segment>} segment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVideoSegmentsApiProjectProjectSlugVideoVideoSlugSegmentsPost(projectSlug: string, videoSlug: string, segment: Array<Segment>, options?: RawAxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.setVideoSegmentsApiProjectProjectSlugVideoVideoSlugSegmentsPost(projectSlug, videoSlug, segment, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Build Final Cut
     * @param {string} projectSlug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public buildFinalCutApiProjectProjectSlugFinalGet(projectSlug: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).buildFinalCutApiProjectProjectSlugFinalGet(projectSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Project
     * @param {string} projectSlug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProjectApiProjectProjectSlugCalculateGet(projectSlug: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProjectApiProjectProjectSlugCalculateGet(projectSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Project
     * @param {string} projectSlug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProjectApiProjectProjectSlugGet(projectSlug: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProjectApiProjectProjectSlugGet(projectSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProjectsApiProjectsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProjectsApiProjectsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Video
     * @param {string} projectSlug 
     * @param {string} videoSlug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVideoApiProjectProjectSlugVideoVideoSlugGet(projectSlug: string, videoSlug: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVideoApiProjectProjectSlugVideoVideoSlugGet(projectSlug, videoSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Video Preview
     * @param {string} projectSlug 
     * @param {string} videoSlug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVideoPreviewApiProjectProjectSlugVideoVideoSlugPreviewGet(projectSlug: string, videoSlug: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVideoPreviewApiProjectProjectSlugVideoVideoSlugPreviewGet(projectSlug, videoSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Video Segments
     * @param {string} projectSlug 
     * @param {string} videoSlug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVideoSegmentsApiProjectProjectSlugVideoVideoSlugThumbnailGet(projectSlug: string, videoSlug: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVideoSegmentsApiProjectProjectSlugVideoVideoSlugThumbnailGet(projectSlug, videoSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Videos
     * @param {string} projectSlug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVideosApiProjectProjectSlugVideosGet(projectSlug: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVideosApiProjectProjectSlugVideosGet(projectSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Serve React App
     * @param {string} filepath 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public serveReactAppFilepathGet(filepath: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).serveReactAppFilepathGet(filepath, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set Video Segments
     * @param {string} projectSlug 
     * @param {string} videoSlug 
     * @param {Array<Segment>} segment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setVideoSegmentsApiProjectProjectSlugVideoVideoSlugSegmentsPost(projectSlug: string, videoSlug: string, segment: Array<Segment>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setVideoSegmentsApiProjectProjectSlugVideoVideoSlugSegmentsPost(projectSlug, videoSlug, segment, options).then((request) => request(this.axios, this.basePath));
    }
}



