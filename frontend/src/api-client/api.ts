/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'slug': string;
    /**
     * 
     * @type {Array<Video>}
     * @memberof Project
     */
    'videos': Array<Video>;
}
/**
 * 
 * @export
 * @interface Segment
 */
export interface Segment {
    /**
     * 
     * @type {number}
     * @memberof Segment
     */
    'start_time': number;
    /**
     * 
     * @type {number}
     * @memberof Segment
     */
    'end_time': number;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}
/**
 * 
 * @export
 * @interface Video
 */
export interface Video {
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'mp4_filename': string;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'lrv_filename': string | null;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'thumbnail_filename': string | null;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'accel_filename': string | null;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'gyro_filename': string | null;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    'segments_filename': string | null;
    /**
     * 
     * @type {Array<Segment>}
     * @memberof Video
     */
    'segments'?: Array<Segment>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Project
         * @param {string} projectSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectProjectProjectSlugGet: async (projectSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getProjectProjectProjectSlugGet', 'projectSlug', projectSlug)
            const localVarPath = `/project/{project_slug}`
                .replace(`{${"project_slug"}}`, encodeURIComponent(String(projectSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsProjectsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Video
         * @param {string} projectSlug 
         * @param {string} videoSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoProjectProjectSlugVideoVideoSlugGet: async (projectSlug: string, videoSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getVideoProjectProjectSlugVideoVideoSlugGet', 'projectSlug', projectSlug)
            // verify required parameter 'videoSlug' is not null or undefined
            assertParamExists('getVideoProjectProjectSlugVideoVideoSlugGet', 'videoSlug', videoSlug)
            const localVarPath = `/project/{project_slug}/video/{video_slug}`
                .replace(`{${"project_slug"}}`, encodeURIComponent(String(projectSlug)))
                .replace(`{${"video_slug"}}`, encodeURIComponent(String(videoSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Video Segments
         * @param {string} projectSlug 
         * @param {string} videoSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoSegmentsProjectProjectSlugVideoVideoSlugSegmentsGet: async (projectSlug: string, videoSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getVideoSegmentsProjectProjectSlugVideoVideoSlugSegmentsGet', 'projectSlug', projectSlug)
            // verify required parameter 'videoSlug' is not null or undefined
            assertParamExists('getVideoSegmentsProjectProjectSlugVideoVideoSlugSegmentsGet', 'videoSlug', videoSlug)
            const localVarPath = `/project/{project_slug}/video/{video_slug}/segments`
                .replace(`{${"project_slug"}}`, encodeURIComponent(String(projectSlug)))
                .replace(`{${"video_slug"}}`, encodeURIComponent(String(videoSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Videos
         * @param {string} projectSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideosProjectProjectSlugVideosGet: async (projectSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('getVideosProjectProjectSlugVideosGet', 'projectSlug', projectSlug)
            const localVarPath = `/project/{project_slug}/videos`
                .replace(`{${"project_slug"}}`, encodeURIComponent(String(projectSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set Video Segments
         * @param {string} projectSlug 
         * @param {string} videoSlug 
         * @param {Array<Segment>} segment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVideoSegmentsProjectProjectSlugVideoVideoSlugSegmentsPost: async (projectSlug: string, videoSlug: string, segment: Array<Segment>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('setVideoSegmentsProjectProjectSlugVideoVideoSlugSegmentsPost', 'projectSlug', projectSlug)
            // verify required parameter 'videoSlug' is not null or undefined
            assertParamExists('setVideoSegmentsProjectProjectSlugVideoVideoSlugSegmentsPost', 'videoSlug', videoSlug)
            // verify required parameter 'segment' is not null or undefined
            assertParamExists('setVideoSegmentsProjectProjectSlugVideoVideoSlugSegmentsPost', 'segment', segment)
            const localVarPath = `/project/{project_slug}/video/{video_slug}/segments`
                .replace(`{${"project_slug"}}`, encodeURIComponent(String(projectSlug)))
                .replace(`{${"video_slug"}}`, encodeURIComponent(String(videoSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(segment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Project
         * @param {string} projectSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectProjectProjectSlugGet(projectSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectProjectProjectSlugGet(projectSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getProjectProjectProjectSlugGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectsProjectsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Project>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectsProjectsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getProjectsProjectsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Video
         * @param {string} projectSlug 
         * @param {string} videoSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideoProjectProjectSlugVideoVideoSlugGet(projectSlug: string, videoSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVideoProjectProjectSlugVideoVideoSlugGet(projectSlug, videoSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getVideoProjectProjectSlugVideoVideoSlugGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Video Segments
         * @param {string} projectSlug 
         * @param {string} videoSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideoSegmentsProjectProjectSlugVideoVideoSlugSegmentsGet(projectSlug: string, videoSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Segment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVideoSegmentsProjectProjectSlugVideoVideoSlugSegmentsGet(projectSlug, videoSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getVideoSegmentsProjectProjectSlugVideoVideoSlugSegmentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Videos
         * @param {string} projectSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideosProjectProjectSlugVideosGet(projectSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVideosProjectProjectSlugVideosGet(projectSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getVideosProjectProjectSlugVideosGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set Video Segments
         * @param {string} projectSlug 
         * @param {string} videoSlug 
         * @param {Array<Segment>} segment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setVideoSegmentsProjectProjectSlugVideoVideoSlugSegmentsPost(projectSlug: string, videoSlug: string, segment: Array<Segment>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setVideoSegmentsProjectProjectSlugVideoVideoSlugSegmentsPost(projectSlug, videoSlug, segment, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setVideoSegmentsProjectProjectSlugVideoVideoSlugSegmentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Project
         * @param {string} projectSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectProjectProjectSlugGet(projectSlug: string, options?: RawAxiosRequestConfig): AxiosPromise<Project> {
            return localVarFp.getProjectProjectProjectSlugGet(projectSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsProjectsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Project>> {
            return localVarFp.getProjectsProjectsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Video
         * @param {string} projectSlug 
         * @param {string} videoSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoProjectProjectSlugVideoVideoSlugGet(projectSlug: string, videoSlug: string, options?: RawAxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.getVideoProjectProjectSlugVideoVideoSlugGet(projectSlug, videoSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Video Segments
         * @param {string} projectSlug 
         * @param {string} videoSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoSegmentsProjectProjectSlugVideoVideoSlugSegmentsGet(projectSlug: string, videoSlug: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Segment>> {
            return localVarFp.getVideoSegmentsProjectProjectSlugVideoVideoSlugSegmentsGet(projectSlug, videoSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Videos
         * @param {string} projectSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideosProjectProjectSlugVideosGet(projectSlug: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.getVideosProjectProjectSlugVideosGet(projectSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set Video Segments
         * @param {string} projectSlug 
         * @param {string} videoSlug 
         * @param {Array<Segment>} segment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVideoSegmentsProjectProjectSlugVideoVideoSlugSegmentsPost(projectSlug: string, videoSlug: string, segment: Array<Segment>, options?: RawAxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.setVideoSegmentsProjectProjectSlugVideoVideoSlugSegmentsPost(projectSlug, videoSlug, segment, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get Project
     * @param {string} projectSlug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProjectProjectProjectSlugGet(projectSlug: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProjectProjectProjectSlugGet(projectSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProjectsProjectsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProjectsProjectsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Video
     * @param {string} projectSlug 
     * @param {string} videoSlug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVideoProjectProjectSlugVideoVideoSlugGet(projectSlug: string, videoSlug: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVideoProjectProjectSlugVideoVideoSlugGet(projectSlug, videoSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Video Segments
     * @param {string} projectSlug 
     * @param {string} videoSlug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVideoSegmentsProjectProjectSlugVideoVideoSlugSegmentsGet(projectSlug: string, videoSlug: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVideoSegmentsProjectProjectSlugVideoVideoSlugSegmentsGet(projectSlug, videoSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Videos
     * @param {string} projectSlug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVideosProjectProjectSlugVideosGet(projectSlug: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVideosProjectProjectSlugVideosGet(projectSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set Video Segments
     * @param {string} projectSlug 
     * @param {string} videoSlug 
     * @param {Array<Segment>} segment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setVideoSegmentsProjectProjectSlugVideoVideoSlugSegmentsPost(projectSlug: string, videoSlug: string, segment: Array<Segment>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setVideoSegmentsProjectProjectSlugVideoVideoSlugSegmentsPost(projectSlug, videoSlug, segment, options).then((request) => request(this.axios, this.basePath));
    }
}



